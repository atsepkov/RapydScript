# arithmetic
assert.equal(3**4, Math.pow(3, 4))
assert.equal(100**-2, Math.pow(100, -2))
assert.equal(2*5**2*3, 150)
assert.equal(100 // 3, 33)
assert.equal(-100 // 3, -34)
a = 100
a //= 3
assert.equal(a, 33)


# comparisons
assert.ok(3<5<7)


# strings (the modifiers currently have no effect)
assert(u'unicode' == 'unicode')
assert(r'raw' == 'raw')


# strict equality
assert(1 == 1)                  # number vs number: ok
assert(True == True)            # boolean vs boolean: ok
assert(not (1 == True))         # number vs boolean: NEVER equal
assert(1 != True)               # number vs boolean: NEVER equal
assert(not ("" == False))       # string vs boolean: NEVER equal
assert(not ("0" == 0))          # string vs integer: NEVER equal
assert(not ("" == 0))           # string vs integer: NEVER equal
assert(bool(1) == True)         # boolean conversion
assert(bool("") == False)       # boolean conversion
assert(JS('1 == true'))         # javascript override
assert(not JS('(1 != true)'))   # javascript override
assert(JS('String("test")') == "test")  # this should do string conversion rather than creating a string object
assert(String("test") != "test")        # this should create a string object


# raw JavaScript
JS('var def = {}')                # ability to bypass reserved keywords in declaration
JS('def').item = 3            # ability to use reserved keywords
assert(JS('def.item') == 3)

assert(JS("""
(function(n) {
    var s = 0;
    for (var i=0; i<=n; i++) {
        s += i;
    }
    return s;
})(5)
""") == (def(n):
    s = 0
    for i in [0 to n]:
        s += i
    return s
)(5))                        # shared scoping and equivalent capability

# the same as above using string modifier 
v'var def = {}'               # ability to bypass reserved keywords in declaration
v'def'.item = 3            # ability to use reserved keywords
assert(v'def.item' == 3)

assert(v"""
(function(n) {
    var s = 0;
    for (var i=0; i<=n; i++) {
        s += i;
    }
    return s;
})(5)
""" == (def(n):
    s = 0
    for i in [0 to n]:
        s += i
    return s
)(5))                        # shared scoping and equivalent capability

# regex
# test from coffeescript manual
before = /// ^ (
  ?: [-=]>             # function
   | [-+*/%<>&|^!?=]=  # compound assign / compare
   | >>>=?             # zero-fill right shift
   | ([-+:])\1         # doubles
   | ([&|<>])\2=?      # logic / shift
   | \?\.              # soak access
   | \.{2,3}           # range or splat
) ///
after = /^(?:[-=]>|[-+*/%<>&|^!?=]=|>>>=?|([-+:])\1|([&|<>])\2=?|\?\.|\.{2,3})/
assert.equal(before.toString(), after.toString())
