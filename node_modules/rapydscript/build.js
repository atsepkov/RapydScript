'use strict'
if (typeof define !== 'function') { var define = require('amdefine')(module) }

define([
"path",
"fs",
"assert",
"../../tools/node"
],

function (path, fs, assert, RapydScript) {

    function _$rapyd$_extends(child, parent) {
        child.prototype = Object.create(parent.prototype);
        child.prototype.constructor = child;
    }

    function Builder(options) {
        this.options = options;
        this.source_dir = options.source_dir;

        // Setup the object/function that supplies an Output stream object.  This allows the
        // flexibility to produce different outputs from an AST.
        if (options.output_supplier) {
            this.output_supplier = options.output_supplier;
        }
        else {
            this.output_supplier = RapydScript.OutputStream;
        }

        // Compute the base package output dir to generate the Javascript files into.
        if (!options.base_output_dir) {
            throw "Must provide the base_output_dir option."
        }

        this.base_output_dir = options.base_output_dir;
        if (options.node_modules) {
            this.base_output_dir = path.join(this.base_output_dir, "node_modules");
        }
    }

    Builder.prototype.module_name = function module_name(filename) {
        if (!filename) {
            filename = this.filename;
        }
        return filename.replace(this.options.ext, "");
    }

    Builder.prototype.py_filepath = function py_filepath(filename) {
        if (!filename) {
            filename = this.filename;
        }
        return path.join(this.source_dir, filename);
    }

    Builder.prototype.js_filepath = function js_filepath(filename) {
        if (!filename) {
            filename = this.filename;
        }
        return path.join(this.base_output_dir, filename)
                   .replace(this.options.ext, ".js");
    }

    Builder.prototype.write = function write(filename) {
        var filepath = this.js_filepath(filename);
        fs.writeFileSync(filepath, this.output.toString());
    }

    Builder.prototype.parse = function parse(filename) {
        this.filename = filename;
        this.options.filename = filename;
        this.ast = RapydScript.parse(fs.readFileSync(this.py_filepath(filename), "utf-8"),
                                     this.options);
    }

    Builder.prototype.print_ast = function print_ast(options) {
        this.output = this.output_supplier(options);
        this.ast.print(this.output);
    }

    Builder.prototype.process_imports = function process_imports(ast, apply_func) {

        if (!ast) {
            ast = this.ast;
        }

        var dirname, base_path;
        var asts = RapydScript.get_import_ast(ast, this.options);
        for (var i in asts) {
            var iast = asts[i];
             if (iast) {
                 apply_func(iast);
                 //recurse and process the imports of the ast just written.
                 this.process_imports(iast["ast"]);
             }
        }
    }

    Builder.prototype.compile_imports = function compile_imports(ast) {
        var self = this;
        var ioutput = this.output_supplier({
            screw_old_browsers: true,
            amd: this.options.amd,
            beautify: this.options.beautify,
        });

        this.process_imports(ast, function(iast) {
             var base_path = iast["path"]; // This could be a function that returns the filename since
                                           // the output supplier may not be generating JS code but a diagram.

             var dirname = path.dirname(base_path);

             iast["ast"].print(ioutput);
             fs.mkdir(path.join(self.base_output_dir, dirname))
             fs.writeFileSync(path.join(self.base_output_dir, base_path),
                              ioutput.toString());
        });
    }

    return {
        Builder : Builder
    };

});
