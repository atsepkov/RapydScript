'use strict'
if (typeof define !== 'function') { var define = require('amdefine')(module) }

define([
"sys",
"path",
"fs",
"assert",
"../../tools/node"
],

function (sys, path, fs, assert, RapydScript) {

    function Tests(test_dir, dirname, options) {
        this.test_dir = path.normalize(path.join(dirname, test_dir ));
        
        var options = JSON.parse(JSON.stringify(options));

        options.readfile = fs.readFileSync;
        options.fs = fs;
        options.search_paths.push(this.test_dir);
        this.options = options;
        
        this.dirname = dirname;
        this.search_paths = options.search_paths;
        this.files = null;
        this.node_modules_dir = null;
    }
    
    Tests.prototype.set_up = function set_up() {
        // For finding the compiled javascript modules.
        process.env['NODE_PATH'] = this.test_dir;

        // Setup a node_modules directory in the testing dir
        this.node_modules_dir = path.join(this.test_dir, "node_modules");
        fs.mkdir(this.node_modules_dir);
    }

    Tests.prototype.tear_down = function tear_down() {
        var self = this;
        this.files.forEach(function(file) {
            fs.unlinkSync(self.js_filepath(file));
        });
    }

    /**
     * Compile imports with missing js files.
     */
    Tests.prototype.compile_imports = function compile_imports(ast) {
        // Default no-op
    }

    Tests.prototype.py_filepath = function py_filepath(file) {
        return path.join(this.test_dir, file);
    }
    
    Tests.prototype.js_filepath = function js_filepath(file) {
        return this.py_filepath(file).replace(this.options.ext, ".js");
    }
    
    /**
     * Run a test case that has been compiled with all modules in one source
     * file.
     */
    Tests.prototype.run_test_case = function run_test_case(output, file) {
        var filepath = this.js_filepath(file);
        var testcontent = "exports.run = function(){assert = require('assert');" +
                          output.toString() +
                          "};";
        fs.writeFileSync(filepath, testcontent);
        var testcase = require(filepath);
        testcase.run();
    }

    Tests.prototype.run = function run() {
        this.set_up();
        
        console.log("Running tests in " + this.test_dir);
        var self = this;
        
        var test_file_pattern = new RegExp("^[^_].*\\"+this.options.ext+"$");
        this.files = fs.readdirSync(this.test_dir).filter(function(name){
            return test_file_pattern.test(name);
        });

        this.files.forEach(function(file) {
            var ast;
            var module_name = file.replace(self.options.ext,"");
            
            try {
                self.options.filename = file;
                ast = RapydScript.parse(fs.readFileSync(self.py_filepath(file),
                                                        "utf-8"),
                                        self.options);
            } catch(ex) {
                sys.print(file + ":\t" + ex + "\n");
                return;
            }
            
            for (var i = 0; i < 2; i++) {
                var title = i == 0 ? 'normal:\t\t' : 'screw-ie8:\t';
                sys.print(title);
                var output = RapydScript.OutputStream({
                    screw_old_browsers: i,
                    amd: self.options.amd,
                    beautify: true,
                });
                ast.print(output);
                self.compile_imports(ast);
                
                // test that output performs correct JS operations
                try {
                    self.run_test_case(output, file);
                } catch (e) {
                    sys.print(file + ":\t" + e.stack + "\n\n");
                    continue;
                }
                sys.print(file + ":\ttest completed successfully\n");
            }
        });
        
        this.tear_down();
    }

    return {
        Tests: Tests
    };
    
});
