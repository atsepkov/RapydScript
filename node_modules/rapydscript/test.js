'use strict'
if (typeof define !== 'function') { var define = require('amdefine')(module) }

define([
"sys",
"path",
"fs",
"assert",
"rapydscript/build",
"../../tools/node"
],

function (sys, path, fs, assert, build, RapydScript) {

    function Tests(test_dir, dirname, options) {
        this.test_dir = path.normalize(path.join(dirname, test_dir ));

        var options = JSON.parse(JSON.stringify(options));

        options.readfile = fs.readFileSync;
        options.fs = fs;
        options.search_paths.push(this.test_dir);
        this.options = options;

        this.dirname = dirname;
        this.search_paths = options.search_paths;
        this.files = null;
        this.node_modules_dir = null;
    }

    Tests.prototype.collect_test_files = function collect_test_files() {
        var test_file_pattern = new RegExp("^[^_].*\\"+this.options.ext+"$");
        this.files = fs.readdirSync(this.test_dir).filter(function(name){
            return test_file_pattern.test(name);
        });
    }

    Tests.prototype.set_up = function set_up() {
        console.log("Calling super class setup");
        // For finding the compiled javascript modules.
        process.env['NODE_PATH'] = this.test_dir;

        this.collect_test_files();

        this.options.source_dir = this.test_dir;
        this.options.base_output_dir = this.test_dir;
        this.options.node_modules = false;

    }

    Tests.prototype.tear_down = function tear_down() {
        var builder = this.builder;
        this.files.forEach(function(filename) {
            fs.unlinkSync(builder.js_filepath(filename));
        });
    }

    /**
     * Compile imports with missing js files.
     */
    Tests.prototype.compile_imports = function compile_imports() {
        // Default no-op
    }

    /**
     * Run a test case that has been compiled with all modules in one source
     * file.
     */
    Tests.prototype.run_test_case = function run_test_case() {
        var builder = this.builder;
        var filepath = builder.js_filepath();
        var testcontent = "exports.run = function(){assert = require('assert');" +
                          builder.output.toString() +
                          "};";
        fs.writeFileSync(filepath, testcontent);
        var testcase = require(filepath);
        testcase.run();
    }

    Tests.prototype.parse_and_run_test_case = function parse_and_run_test_case(file) {
        var builder = this.builder;

        try {
            builder.parse(file);
        } catch(ex) {
            sys.print(file + ":\t" + ex + "\n");
            return;
        }

        for (var i = 0; i < 2; i++) {
            var title = i == 0 ? 'normal:\t\t' : 'screw-ie8:\t';
            sys.print(title);
            builder.print_ast({
                screw_old_browsers: i,
                amd: this.options.amd,
                beautify: true,
            });
            this.compile_imports();

            // test that output performs correct JS operations
            try {
                this.run_test_case();
            } catch (e) {
                sys.print(file + ":\t" + e.stack + "\n\n");
                continue;
            }
            sys.print(file + ":\ttest completed successfully\n");
        }
    }

    Tests.prototype.run = function run() {
        console.log("Running tests in " + this.test_dir);

        this.set_up();
        this.builder = new build.Builder(this.options);

        var self = this;
        this.files.forEach(function(file) {
            self.parse_and_run_test_case(file);
        });

        this.tear_down();
    }

    return {
        Tests: Tests
    };

});
