"""
 * test.js
 * Copyright (C) 2016 Alexander Tsepkov
 * originally based on work from Kovid Goyal <kovid at kovidgoyal.net>
 *
 * Distributed under terms of the MIT license.
"""
path = require('path')
fs = require('fs')
rapydscript = require('../lib/rapydscript')

module.exports = def(argv, base_path, src_path, lib_path, test_type):
    # run all tests and exit
    assert = require("assert")
    os = require('os')
    all_ok = True
    vm = require('vm')
    test_dir = path.join(base_path, 'test/basic')
    error_dir = path.join(base_path, 'test/error')
    web_dir = path.join(base_path, 'test/web')
    perf_dir = path.join(base_path, 'test/perf')
    baselib = rapydscript.parse_baselib(src_path, True)
    files, ok

    # visual indicator of version
    if argv.ecmascript6:
        console.log('Running in ES6 mode!\n')
        v8Version = process.versions.v8.split('.')
        if int(v8Version[0]) < 4 or int(v8Version[0]) <= 4 and int(v8Version[1]) <= 9:
            console.log("Your V8 engine is too old to support ES6 features, skipping ES6 tests...")
            return

    # this function is the actual transcompiler, the rest of the code in this module is
    # just a test harness
    def compileFile(file, basepath):
        filepath = path.join(basepath or test_dir, file)
        try:
            return rapydscript.compile(fs.readFileSync(filepath, "utf-8"), {
                filename: file,
                es6: argv.ecmascript6,
                readfile: fs.readFileSync,
                basedir: test_dir,
                libdir: path.join(src_path, 'lib'),
                baselib: baselib,
                beautify: True
            })
        except as ex:
            console.log(file + ":\t" + ex + "\n")
            return

    if test_type is not 'bench':
        # basic test cases
        console.log('\nBASIC TESTS\n')
        if argv.files.length:
            files = []
            for fname in argv.files: files.push(fname + '.pyj')
        else:
            files = fs.readdirSync(test_dir).filter(def(name):
                # omit files that start with underscores
                return /^[^_].*\.pyj$/.test(name)
            )
        for file in files:
            # omit files that es6 only if not in es6-mode
            if /^.+?_es6\.pyj$/.test(file) and not argv.ecmascript6:
                continue

            output = compileFile(file)
            code = output.toString()

            # test that output performs correct JS operations
            jsfile = path.join(os.tmpdir(), file + '.js')
            fs.writeFileSync(jsfile, code)
            try:
                vm.runInNewContext(code, {
                    'assert': assert,
                    'require': require,
                    'rapydscript': rapydscript,
                    'console': console,
                    'base_path': base_path
                }, {'filename': jsfile})
                ok = True
                fs.unlinkSync(jsfile)
            except as e:
                ok = False
                if e.stack:
                    console.log(file + ":\t" + e.stack + "\n\n")
                else:
                    console.log(file + ":\t" + e + "\n\n")
            if ok:
                console.log(file + ":\ttest completed successfully\n")
            else:
                all_ok = False console.log(file + ":\ttest failed\n")

        # tests that cause compile time errors
        console.log('\nCOMPILATION ERROR TESTS\n')
        if not argv.files.length:
            files = fs.readdirSync(error_dir).filter(def(name):
                # omit files that start with underscores
                return /^[^_].*\.pyj$/.test(name)
            )
        for file in files:
            filepath = path.join(error_dir, file)
            code = fs.readFileSync(filepath, "utf-8").split('\n')
            ok = True
            code.forEach(def(line):
                if line[0] is '#' or not line.trim().length:
                    return # blank line, no test here
                try:
                    ast
                    ast = rapydscript.parse(line, {
                        filename: file,
                        es6: argv.ecmascript6,
                        toplevel: ast,
                        readfile: fs.readFileSync,
                        basedir: error_dir,
                        libdir: path.join(src_path, 'lib'),
                    })
                    # we want EVERY line to throw an exception
                    # since these are parser errors, no need for output
                    ok = False
                    console.log(file + ":\t`" + line + "` did not throw an error\n")
                except:
                    return
            )
            if ok:
                console.log(file + ":\ttest completed successfully\n")
            else:
                all_ok = False console.log(file + ":\ttest failed\n")

    # DOM/web tests
    if test_type is 'full':
        console.log('\nDOM TESTS\n')
        output = compileFile('tests.pyj', web_dir)
        code = output.toString()

        Browser = require("zombie")
        browser = new Browser()
        before(def(done):
            browser.visit("file:/" + path.resolve(web_dir, 'index.html'), done)

            describe('starting headless browser tests', def():
                eval(code)
            )
        )

    # performance benchmarks
    if test_type is 'full' or test_type is 'bench':
        console.log('\nBENCHMARK TESTS\n')
        Benchmark = require('benchmark')
        if argv.files.length:
            files = []
            for fname in argv.files: files.push(fname + '.pyj')
        else:
            files = fs.readdirSync(perf_dir).filter(def(name):
                # omit files that start with underscores
                return /^[^_].*\.pyj$/.test(name)
            )
        files.forEach(def(file):
            bench = new Benchmark.Suite()
            output = compileFile(file, perf_dir)
            code = output.toString()

            # add test cases
            eval(code)

            bench.on('complete', def():
                baseline = this[0].hz
                console.log(file + ':')
                s = def(num):
                    if (num > 1e3): return parseInt(num).toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",")
                    return num.toPrecision(4)
                this.forEach(def(item):
                    normalized = item.hz/baseline * 100
                    console.log("  " + item.name + ":")
                    console.log("    " + s(item.hz) + " ops/s, " + s(item.stats.mean) + " +/- " + s(item.stats.deviation) + " s/op (" + s(normalized) + "%)")
                )
            ).run()
        )

    if not all_ok: console.log('There were some test failures!')
    process.exit((all_ok) ? 0 : 1)
