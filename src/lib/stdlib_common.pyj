###########################################################
# RapydScript Standard Library
# Author: Alexander Tsepkov
# Copyright 2013 Pyjeon Software LLC
# License: Apache License    2.0
# This library is covered under Apache license, so that
# you can distribute it with your RapydScript applications.
###########################################################


###########################################################
# Basic Functionality
###########################################################
nonlocal JSON
JSON = JSON or {}

# implement JSON.stringify in older browsers, if doesn't already exist
if not JSON.stringify:
    JSON.stringify = def(obj):
        t = typeof (obj);
        if (t == "function" or t == "undefined"):
            #return undefined
            return

        if (t == "string" or (t == "object" and obj and obj.constructor == String) ):
            escape = /["\\\x00-\x1f\x7f-\x9f]/g
            meta = {
                '\b': '\\b',
                '\t': '\\t',
                '\n': '\\n',
                '\f': '\\f',
                '\r': '\\r',
                '"': '\\"',
                '\\': '\\\\'
            }
            if obj.match(escape):
                obj = obj.replace(escape, def (a):
                    c = meta[a]
                    if (typeof(c) == 'string'):
                        return c;
                    c = a.charCodeAt();
                    return '\\u00' + Math.floor(c / 16).toString(16) + (c % 16).toString(16)
                )
            return '"' + obj + '"'
        if (t != 'object' or obj == null):
            return (String)(obj)

        if (obj and (obj.constructor == Number or obj.constructor == Boolean)):
            return (String)(obj)

        #recurse array or object
        json = []
        arr = (obj and obj.constructor == Array)
        #Need a better way to do this, specifically the for loop
        for n in dir(obj):
            if (Object.prototype.hasOwnProperty.call(obj, n)):
                v = obj[n]
                if (arr or v != undefined):
                    vc = JSON.stringify(v)
                    if (vc == undefined):
                        vc = null
                    json.push((arr ? '' : '"' + n + '":') + (String)(vc))

        return (arr ? '[' : '{') + (String)(json) + (arr ? ']' : '}')


# Pythonic shortcut for converting an object to string
str = JSON.stringify

# WARNING: when using this function decorator, you will not be able to use obfuscators that rename local variables
def kwargs(f):
    argNames = f.toString().match(/\(([^\)]+)/)[1]
    argNames = argNames ? argNames.split(',').map(def(s): return s.trim();) : []
    return def():
        args = [].slice.call(arguments)
        if args.length:
            kw = args.pop()
            if type(kw) == 'object':
                for i in range(argNames.length):
                    if argNames[i] in dir(kw):
                        args[i] = kw[argNames[i]]
            else:
                args.push(kw)
        return f.apply(this, args)


###########################################################
# Errors
###########################################################
class IndexError(Error):
    def __init__(self, message="list index out of range"):
        self.name = "IndexError"
        self.message = message

class TypeError(Error):
    def __init__(self, message):
        self.name = "TypeError"
        self.message = message

class ValueError(Error):
    def __init__(self, message):
        self.name = "ValueError"
        self.message = message

class AssertionError(Error):
    def __init__(self, message=""):
        self.name = "AssertionError"
        self.message = message


###########################################################
# Arrays
###########################################################
if not Array.prototype.map:
	# declare map() method for older browsers
	JS("""
	Array.prototype.map = function(callback, thisArg) {
		var T, A, k;
		if (this == null) {
			throw new TypeError(" this is null or not defined");
		}
		var O = Object(this);
		var len = O.length >>> 0;
		if ({}.toString.call(callback) != "[object Function]") {
			throw new TypeError(callback + " is not a function");
		}
		if (thisArg) {
			T = thisArg;
		}
		A = new Array(len);
		for (var k = 0; k < len; k++) {
			var kValue, mappedValue;
			if (k in O) {
				kValue = O[k];
				mappedValue = callback.call(T, kValue);
				A[k] = mappedValue;
			}
		}
		return A;
	};
	""")
def map(oper, arr):
	return list(arr.map(oper))

if not Array.prototype.filter:
	# declare filter() method for older browsers
	JS("""
	Array.prototype.filter = function(filterfun, thisArg) {
		"use strict";
		if (this == null) {
			throw new TypeError(" this is null or not defined");
		}
		var O = Object(this);
		var len = O.length >>> 0;
		if ({}.toString.call(filterfun) != "[object Function]") {
			throw new TypeError(filterfun + " is not a function");
		}
		if (thisArg) {
			T = thisArg;
		}
		var A = [];
		var thisp = arguments[1];
		for (var k = 0; k < len; k++) {
			if (k in O) {
				var val = O[k]; // in case fun mutates this
				if (filterfun.call(T, val))
					A.push(val);
			}
		}
		return A;
	};
	""")
def filter(oper, arr):
	return list(arr.filter(oper))
def sum(arr, start=0):
    return arr.reduce(
        def(prev, cur): return prev+cur;,
        start
    )


###########################################################
# Deep Equality Comparison
###########################################################
def deep_eq(a, b):
    """
    Equality comparison that works with all data types, returns true if structure and
    contents of first object equal to those of second object

    Arguments:
        a: first object
        b: second object
    """
    if a is b:
        # simple object
        return True

    if (isinstance(a, Array) and isinstance(b, Array)) or (isinstance(a, Object) and isinstance(b, Object)):
        # if length ot type doesn't match, they can't be equal
        if a.constructor is not b.constructor or a.length is not b.length:
            return False

        # compare individual properties (order doesn't matter if it's a hash)
        for i in dict.keys(a):
            if b.hasOwnProperty(i):
                # recursively test equality of object children
                if not deep_eq(a[i], b[i]):
                    return False
            else:
                return False
        return True
    return False
