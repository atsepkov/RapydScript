###########################################################
# RapydScript Standard Library
# Author: Alexander Tsepkov
# Copyright 2013 Pyjeon Software LLC
# License: Apache License    2.0
# This library is covered under Apache license, so that
# you can distribute it with your RapydScript applications.
###########################################################


###########################################################
# Basic Functionality
###########################################################
nonlocal JSON
JSON = JSON or {}

# Use the the json reference https://github.com/douglascrockford/JSON-js
def ():
    'use strict'

    if typeof(Date.prototype.toJSON) != 'function':
        def f(n):
            # Format integers to have at least two digits.
            return (n < 10 ? '0' + n : n)

        Date.prototype.toJSON = def ():
            return (isFinite(this.valueOf())
            ? this.getUTCFullYear() + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate()) + 'T' +
                    f(this.getUTCHours()) + ':' +
                    f(this.getUTCMinutes()) + ':' +
                    f(this.getUTCSeconds()) + 'Z'
            : null)

    def this_value():
        return this.valueOf()

    if typeof(Boolean.prototype.toJSON) != 'function':
        Boolean.prototype.toJSON = this_value

    if typeof(Number.prototype.toJSON) != 'function':
        Number.prototype.toJSON = this_value

    if typeof(String.prototype.toJSON) != 'function':
        String.prototype.toJSON = this_value


    # If the JSON object does not yet have a stringify method, give it one.
    if (typeof JSON.stringify != 'function'):

        escapable = /[\\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g
        # table of character substitutions
        meta = {
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"': '\\"',
            '\\': '\\\\'
        }
        rep = undefined
        gap = undefined
        indent = undefined


        def quote(string):

            # If the string contains no control characters, no quote characters, and no
            # backslash characters, then we can safely slap some quotes around it.
            # Otherwise we must also replace the offending characters with safe escape
            # sequences.
            nonlocal meta
            nonlocal escapable
            escapable.lastIndex = 0
            return (escapable.test(string)
                ? '"' + string.replace(escapable, def (a):
                    c = meta[a]
                    return (typeof(c) == 'string' ? c
                        : '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16))
                        .slice(-4))
                ) + '"' : '"' + string + '"');

        def jstr(key, holder):

            # Produce a string from holder[key].
            nonlocal gap
            nonlocal rep

            # i: The loop counter.
            # k: The member key.
            # v: The member value.
            mind = gap
            value = holder[key]

            # If the value has a toJSON method, call it to obtain a replacement value.
            if (value and typeof(value) == 'object' and
                    typeof(value.toJSON) == 'function'):
                value = value.toJSON(key)

            # If we were called with a replacer function, then call the replacer to
            # obtain a replacement value.

            if (typeof(rep) == 'function'):
                value = rep.call(holder, key, value)

            # What happens next depends on the value's type.
            if (typeof(value) == 'string'):
                return quote(value)

            elif (typeof(value) == 'number'):

                # JSON numbers must be finite. Encode non-finite numbers as null.

                return isFinite(value) ? (String)(value) : 'null';

            elif (typeof(value) == 'boolean' or typeof(value) == 'null'):

                # If the value is a boolean or null, convert it to a string. Note:
                # typeof null does not produce 'null'. The case is included here in
                # the remote chance that this gets fixed someday.

                return (String)(value);

            # If the type is 'object', we might be dealing with an object or an array or
            # null.

            elif (typeof(value) == 'object'):

                # Due to a specification blunder in ECMAScript, typeof null is 'object',
                # so watch out for that case.

                if (not value):
                    return 'null'

                # Make an array to hold the partial results of stringifying this object value.

                gap += indent;
                partial = [];

                # Is the value an array?

                if (Object.prototype.toString.apply(value) == '[object Array]'):

                    # The value is an array. Stringify every element. Use null as a placeholder
                    # for non-JSON values.

                    length = value.length
                    for i in range(length):
                        partial[i] = jstr(i, value) or 'null'

                    # Join all of the elements together, separated with commas, and wrap them in
                    # brackets.
                    v = (partial.length == 0)
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']'
                    gap = mind
                    return v

                # If the replacer is an array, use it to select the members to be stringified.

                if rep and typeof(rep) == 'object':
                    length = rep.length
                    for i in range(length):
                        if (typeof(rep[i]) == 'string'):
                            k = rep[i]
                            v = jstr(k, value)
                            if v:
                                partial.push(quote(k) + (gap ? ': ' : ':') + v)
                else:

                    # Otherwise, iterate through all of the keys in the object.

                    for k in dir(value):
                        if (Object.prototype.hasOwnProperty.call(value, k)):
                            v = jstr(k, value)
                            if v:
                                partial.push(quote(k) + (gap ? ': ' : ':') + v)

                # Join all of the member texts together, separated with commas,
                # and wrap them in braces.

                v = (partial.length == 0)
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}'
                gap = mind
                return v


        JSON.stringify = def (value, replacer, space):

            # The stringify method takes a value and an optional replacer, and an optional
            # space parameter, and returns a JSON text. The replacer can be a function
            # that can replace values, or an array of strings that will select the keys.
            # A default replacer method can be provided. Use of the space parameter can
            # produce text that is more easily readable.

            nonlocal gap
            nonlocal indent
            nonlocal rep
            gap = ''
            indent = ''

            # If the space parameter is a number, make an indent string containing that
            # many spaces.

            if (typeof(space) == 'number'):
                for i in range(space):
                    indent += ' '

            # If the space parameter is a string, it will be used as the indent string.

            elif (typeof(space) == 'string'):
                indent = space

            # If there is a replacer, it must be a function or an array.
            # Otherwise, throw an error.

            rep = replacer
            if (replacer and typeof(replacer) != 'function' and
                    (typeof(replacer) != 'object' or
                     typeof(replacer.length) != 'number')):
                raise Error('JSON.stringify')

            # Make a fake root object containing our value under the key of ''.
            # Return the result of stringifying the value.

            return jstr('', {'': value});

.call()


# Pythonic shortcut for converting an object to string
str = JSON.stringify

# WARNING: when using this function decorator, you will not be able to use obfuscators that rename local variables
def kwargs(f):
    argNames = f.toString().match(/\(([^\)]+)/)[1]
    argNames = argNames ? argNames.split(',').map(def(s): return s.trim();) : []
    return def():
        args = [].slice.call(arguments)
        if args.length:
            kw = args.pop()
            if type(kw) == 'object':
                for i in range(argNames.length):
                    if argNames[i] in dir(kw):
                        args[i] = kw[argNames[i]]
            else:
                args.push(kw)
        return f.apply(this, args)


###########################################################
# Errors
###########################################################
class IndexError(Error):
    def __init__(self, message="list index out of range"):
        self.name = "IndexError"
        self.message = message

class TypeError(Error):
    def __init__(self, message):
        self.name = "TypeError"
        self.message = message

class ValueError(Error):
    def __init__(self, message):
        self.name = "ValueError"
        self.message = message

class AssertionError(Error):
    def __init__(self, message=""):
        self.name = "AssertionError"
        self.message = message


###########################################################
# Arrays
###########################################################
if not Array.prototype.map:
	# declare map() method for older browsers
	JS("""
	Array.prototype.map = function(callback, thisArg) {
		var T, A, k;
		if (this == null) {
			throw new TypeError(" this is null or not defined");
		}
		var O = Object(this);
		var len = O.length >>> 0;
		if ({}.toString.call(callback) != "[object Function]") {
			throw new TypeError(callback + " is not a function");
		}
		if (thisArg) {
			T = thisArg;
		}
		A = new Array(len);
		for (var k = 0; k < len; k++) {
			var kValue, mappedValue;
			if (k in O) {
				kValue = O[k];
				mappedValue = callback.call(T, kValue);
				A[k] = mappedValue;
			}
		}
		return A;
	};
	""")
def map(oper, arr):
	return list(arr.map(oper))

if not Array.prototype.filter:
	# declare filter() method for older browsers
	JS("""
	Array.prototype.filter = function(filterfun, thisArg) {
		"use strict";
		if (this == null) {
			throw new TypeError(" this is null or not defined");
		}
		var O = Object(this);
		var len = O.length >>> 0;
		if ({}.toString.call(filterfun) != "[object Function]") {
			throw new TypeError(filterfun + " is not a function");
		}
		if (thisArg) {
			T = thisArg;
		}
		var A = [];
		var thisp = arguments[1];
		for (var k = 0; k < len; k++) {
			if (k in O) {
				var val = O[k]; // in case fun mutates this
				if (filterfun.call(T, val))
					A.push(val);
			}
		}
		return A;
	};
	""")
def filter(oper, arr):
	return list(arr.filter(oper))
def sum(arr, start=0):
    return arr.reduce(
        def(prev, cur): return prev+cur;,
        start
    )


###########################################################
# Deep Equality Comparison
###########################################################
def deep_eq(a, b):
    """
    Equality comparison that works with all data types, returns true if structure and
    contents of first object equal to those of second object

    Arguments:
        a: first object
        b: second object
    """
    if a is b:
        # simple object
        return True

    if (isinstance(a, Array) and isinstance(b, Array)) or (isinstance(a, Object) and isinstance(b, Object)):
        # if length ot type doesn't match, they can't be equal
        if a.constructor is not b.constructor or a.length is not b.length:
            return False

        # compare individual properties (order doesn't matter if it's a hash)
        for i in dict.keys(a):
            if b.hasOwnProperty(i):
                # recursively test equality of object children
                if not deep_eq(a[i], b[i]):
                    return False
            else:
                return False
        return True
    return False
